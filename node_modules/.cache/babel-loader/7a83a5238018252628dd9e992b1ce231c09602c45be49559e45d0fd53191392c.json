{"ast":null,"code":"// src/services/api.js\n\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\n// 创建Apollo Client实例\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT || 'http://localhost:4000/graphql',\n  cache: new InMemoryCache()\n});\n\n// 上传文件的相关Query和Mutation\nexport const UPLOAD_FILE_MUTATION = gql`\n  mutation UploadFile($file: Upload!, $metadata: String!) {\n    uploadFile(file: $file, metadata: $metadata) {\n      id\n      downloadId\n      createdAt\n      expiresAt\n    }\n  }\n`;\n\n// 获取文件元数据\nexport const GET_FILE_METADATA = gql`\n  query GetFileMetadata($downloadId: String!) {\n    fileMetadata(downloadId: $downloadId) {\n      id\n      metadata\n      filename\n      expiresAt\n    }\n  }\n`;\n\n// 上传加密文件\nexport const uploadEncryptedFile = async (encryptedFile, metadata) => {\n  // 创建FormData以传输文件\n  const file = new File([encryptedFile], 'encrypted_file.bin', {\n    type: 'application/octet-stream'\n  });\n  try {\n    const {\n      data\n    } = await client.mutate({\n      mutation: UPLOAD_FILE_MUTATION,\n      variables: {\n        file: file,\n        metadata: JSON.stringify(metadata)\n      },\n      context: {\n        useMultipart: true // 使用multipart/form-data格式发送文件\n      }\n    });\n    return data.uploadFile;\n  } catch (error) {\n    console.error('上传文件失败:', error);\n    throw new Error('上传文件失败，请重试');\n  }\n};\n\n// 获取文件元数据以准备下载\nexport const getFileMetadata = async downloadId => {\n  try {\n    const {\n      data\n    } = await client.query({\n      query: GET_FILE_METADATA,\n      variables: {\n        downloadId\n      }\n    });\n    return data.fileMetadata;\n  } catch (error) {\n    console.error('获取文件元数据失败:', error);\n    throw new Error('找不到文件或链接已过期');\n  }\n};\n\n// 下载加密文件\nexport const downloadEncryptedFile = async downloadId => {\n  try {\n    // 获取文件元数据\n    const metadata = await getFileMetadata(downloadId);\n\n    // 使用普通的fetch API下载文件\n    const response = await fetch(`/api/download/${downloadId}`);\n    if (!response.ok) {\n      throw new Error('文件下载失败');\n    }\n    const encryptedFile = await response.blob();\n    return {\n      encryptedFile,\n      metadata: JSON.parse(metadata.metadata)\n    };\n  } catch (error) {\n    console.error('下载文件失败:', error);\n    throw new Error('下载文件失败，请检查链接是否有效');\n  }\n};","map":{"version":3,"names":["ApolloClient","InMemoryCache","gql","client","uri","process","env","REACT_APP_GRAPHQL_ENDPOINT","cache","UPLOAD_FILE_MUTATION","GET_FILE_METADATA","uploadEncryptedFile","encryptedFile","metadata","file","File","type","data","mutate","mutation","variables","JSON","stringify","context","useMultipart","uploadFile","error","console","Error","getFileMetadata","downloadId","query","fileMetadata","downloadEncryptedFile","response","fetch","ok","blob","parse"],"sources":["/Users/yangkexin/Documents/CS5321/Group_project/End_to_end_encryption_file_/src/services/api.js"],"sourcesContent":["// src/services/api.js\n\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\n// 创建Apollo Client实例\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT || 'http://localhost:4000/graphql',\n  cache: new InMemoryCache()\n});\n\n// 上传文件的相关Query和Mutation\nexport const UPLOAD_FILE_MUTATION = gql`\n  mutation UploadFile($file: Upload!, $metadata: String!) {\n    uploadFile(file: $file, metadata: $metadata) {\n      id\n      downloadId\n      createdAt\n      expiresAt\n    }\n  }\n`;\n\n// 获取文件元数据\nexport const GET_FILE_METADATA = gql`\n  query GetFileMetadata($downloadId: String!) {\n    fileMetadata(downloadId: $downloadId) {\n      id\n      metadata\n      filename\n      expiresAt\n    }\n  }\n`;\n\n// 上传加密文件\nexport const uploadEncryptedFile = async (encryptedFile, metadata) => {\n  // 创建FormData以传输文件\n  const file = new File([encryptedFile], 'encrypted_file.bin', {\n    type: 'application/octet-stream',\n  });\n  \n  try {\n    const { data } = await client.mutate({\n      mutation: UPLOAD_FILE_MUTATION,\n      variables: {\n        file: file,\n        metadata: JSON.stringify(metadata)\n      },\n      context: {\n        useMultipart: true // 使用multipart/form-data格式发送文件\n      }\n    });\n    \n    return data.uploadFile;\n  } catch (error) {\n    console.error('上传文件失败:', error);\n    throw new Error('上传文件失败，请重试');\n  }\n};\n\n// 获取文件元数据以准备下载\nexport const getFileMetadata = async (downloadId) => {\n  try {\n    const { data } = await client.query({\n      query: GET_FILE_METADATA,\n      variables: { downloadId }\n    });\n    \n    return data.fileMetadata;\n  } catch (error) {\n    console.error('获取文件元数据失败:', error);\n    throw new Error('找不到文件或链接已过期');\n  }\n};\n\n// 下载加密文件\nexport const downloadEncryptedFile = async (downloadId) => {\n  try {\n    // 获取文件元数据\n    const metadata = await getFileMetadata(downloadId);\n    \n    // 使用普通的fetch API下载文件\n    const response = await fetch(`/api/download/${downloadId}`);\n    if (!response.ok) {\n      throw new Error('文件下载失败');\n    }\n    \n    const encryptedFile = await response.blob();\n    return { encryptedFile, metadata: JSON.parse(metadata.metadata) };\n  } catch (error) {\n    console.error('下载文件失败:', error);\n    throw new Error('下载文件失败，请检查链接是否有效');\n  }\n};\n"],"mappings":"AAAA;;AAEA,SAASA,YAAY,EAAEC,aAAa,EAAEC,GAAG,QAAQ,gBAAgB;;AAEjE;AACA,MAAMC,MAAM,GAAG,IAAIH,YAAY,CAAC;EAC9BI,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B,IAAI,+BAA+B;EAC9EC,KAAK,EAAE,IAAIP,aAAa,CAAC;AAC3B,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMQ,oBAAoB,GAAGP,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMQ,iBAAiB,GAAGR,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMS,mBAAmB,GAAG,MAAAA,CAAOC,aAAa,EAAEC,QAAQ,KAAK;EACpE;EACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,aAAa,CAAC,EAAE,oBAAoB,EAAE;IAC3DI,IAAI,EAAE;EACR,CAAC,CAAC;EAEF,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMd,MAAM,CAACe,MAAM,CAAC;MACnCC,QAAQ,EAAEV,oBAAoB;MAC9BW,SAAS,EAAE;QACTN,IAAI,EAAEA,IAAI;QACVD,QAAQ,EAAEQ,IAAI,CAACC,SAAS,CAACT,QAAQ;MACnC,CAAC;MACDU,OAAO,EAAE;QACPC,YAAY,EAAE,IAAI,CAAC;MACrB;IACF,CAAC,CAAC;IAEF,OAAOP,IAAI,CAACQ,UAAU;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,MAAM,IAAIE,KAAK,CAAC,YAAY,CAAC;EAC/B;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,UAAU,IAAK;EACnD,IAAI;IACF,MAAM;MAAEb;IAAK,CAAC,GAAG,MAAMd,MAAM,CAAC4B,KAAK,CAAC;MAClCA,KAAK,EAAErB,iBAAiB;MACxBU,SAAS,EAAE;QAAEU;MAAW;IAC1B,CAAC,CAAC;IAEF,OAAOb,IAAI,CAACe,YAAY;EAC1B,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAM,IAAIE,KAAK,CAAC,aAAa,CAAC;EAChC;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,qBAAqB,GAAG,MAAOH,UAAU,IAAK;EACzD,IAAI;IACF;IACA,MAAMjB,QAAQ,GAAG,MAAMgB,eAAe,CAACC,UAAU,CAAC;;IAElD;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiBL,UAAU,EAAE,CAAC;IAC3D,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIR,KAAK,CAAC,QAAQ,CAAC;IAC3B;IAEA,MAAMhB,aAAa,GAAG,MAAMsB,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC3C,OAAO;MAAEzB,aAAa;MAAEC,QAAQ,EAAEQ,IAAI,CAACiB,KAAK,CAACzB,QAAQ,CAACA,QAAQ;IAAE,CAAC;EACnE,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;EACrC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}